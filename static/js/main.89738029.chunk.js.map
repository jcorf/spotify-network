{"version":3,"sources":["config.js","hash.js","logo.svg","background.jpg","background.png","components/App.js","reportWebVitals.js","index.js"],"names":["scopes","hash","window","location","substring","split","reduce","initial","item","parts","decodeURIComponent","App","state","token","artist_ID","artist_Name","albums","artists","name","id","tracks","all_songs","all_artists","all_ids","recent_artist_id","temp","starting_artist","count","no_data","shared_images","connections","mount","_token","access_token","this","setState","prevProps","prevState","snapshot","getUserRecentlyPlayed","getAlbums","$","url","type","dataType","beforeSend","xhr","setRequestHeader","success","data","items","track","artistId","images","albumId","sharedUrl","map","concat","artist","includes","value","external_urls","spotify","artist_Id","album","length","getTracksOfAlbum","logo","className","href","join","Container","fluid","true","Row","Col","xs","target","indexOf","variant","src","onClick","changeArtist","hover","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mRAMaA,EAAS,CACpB,gBACA,6BCPIC,EAAOC,OAAOC,SAASF,KAC5BG,UAAU,GACVC,MAAM,KACNC,QAAO,SAASC,EAASC,GACxB,GAAIA,EAAM,CACR,IAAIC,EAAQD,EAAKH,MAAM,KACvBE,EAAQE,EAAM,IAAMC,mBAAmBD,EAAM,IAE/C,OAAOF,IACN,IACHL,OAAOC,SAASF,KAAO,GAERA,QCbA,G,MAAA,IAA0B,kC,yBCA1B,ICAA,I,kBC0SAU,E,kDA5Rb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXC,MAAO,KACPC,UAAW,GACXC,YAAa,GACbC,OAAQ,CAAC,CAACC,QAAS,CAAC,CAACC,KAAM,MAAO,CAACA,KAAM,IAAK,CAACC,GAAI,IAAK,CAACD,KAAM,KAC/DE,OAAQ,CAAC,CAACH,QAAS,CAAC,CAACC,KAAM,IAAM,CAACC,GAAI,MAAO,CAACD,KAAM,KACpDG,UAAW,GACXC,YAAa,GACbC,QAAS,GACTC,iBAAkB,GAClBC,KAAM,GACNC,gBAAiB,GACjBC,MAAO,EACPC,SAAS,EACTC,cAAgB,GAChBC,YAAa,GACbC,MAAQ,GAnBE,E,qDA2Bd,WAEE,IAAIC,EAAS/B,EAAKgC,aAEdD,GAEFE,KAAKC,SAAS,CACZtB,MAAOmB,EAAQD,MAAQ,M,gCAS7B,SAAmBK,EAAWC,EAAWC,GACf,GAApBJ,KAAKtB,MAAMmB,QACbG,KAAKK,sBAAsBL,KAAKtB,MAAMC,OACtCqB,KAAKM,UAAUN,KAAKtB,MAAMC,MAAOqB,KAAKtB,MAAMY,qB,mCA4BhD,SAAsBX,GAAQ,IAAD,OAC3B4B,OAAO,CACLC,IAAK,+DACLC,KAAM,MACNC,SAAU,OACVC,WAAY,SAAAC,GACVA,EAAIC,iBAAiB,gBAAiB,UAAYlC,IAEpDmC,QAAS,SAAAC,GACFA,EAML,EAAKd,SAAS,CAAEX,iBAAkByB,EAAKC,MAAM,GAAGC,MAAMlC,QAAQ,GAAGE,GAAIS,SAAS,IAL5E,EAAKO,SAAS,CACZP,SAAS,S,0BAUnB,SAAawB,GACXlB,KAAKC,SAAS,CACZnB,OAAQ,CAAC,CAACC,QAAS,CAAC,CAACC,KAAM,IAAK,CAACC,GAAI,MAAO,CAACD,KAAM,IAAK,CAACC,GAAI,IAAK,CAACkC,OAAS,CAAC,CAACX,IAAM,OACpFtB,OAAQ,CAAC,CAACH,QAAS,CAAC,CAACC,KAAM,IAAK,CAACC,GAAI,MACnC,CAACD,KAAM,KAETG,UAAW,GACXC,YAAa,GACbC,QAAS,GACTI,MAAOO,KAAKtB,MAAMe,MAAQ,EAC1BE,cAAe,KAEjBK,KAAKM,UAAUN,KAAKtB,MAAMC,MAAOuC,K,8BAGnC,SAAiBvC,EAAOyC,EAASC,GAAY,IAAD,OAC1Cd,OAAO,CACLC,IAAK,qCAAuCY,EAAU,UACtDX,KAAM,MACNE,WAAY,SAAAC,GACVA,EAAIC,iBAAiB,gBAAiB,UAAYlC,IAEpDmC,QAAS,SAAAC,GAEFA,GAML,EAAKd,SAAS,CAACf,OAAQ6B,EAAKC,MAAOtB,SAAS,IAC5C,EAAKhB,MAAMQ,OAAOoC,KAAI,SAACL,GAAD,OAClB,EAAKhB,SAAS,CAACd,UAAW,EAAKT,MAAMS,UAAUoC,OAAON,QAG1D,EAAKvC,MAAMQ,OAAOoC,KAAI,SAACL,GACjBA,EAAMlC,QAAQuC,KAAI,SAACE,GACb,IAAK,EAAK9C,MAAMW,QAAQoC,SAASD,EAAOvC,IAAK,CAC3C,IAAMyC,EAAQ,CAACF,EAAOvC,GAAIoC,EAAWJ,EAAMjC,KAAMiC,EAAMU,cAAcC,SACrE,EAAK3B,SAAS,CAACN,cAAgB,EAAKjB,MAAMiB,cAAc4B,OAAOG,KAE/D,EAAKzB,SACD,CAACb,YAAa,EAAKV,MAAMU,YAAYmC,OAAOC,KAChD,EAAKvB,SAAS,CAACZ,QAAS,EAAKX,MAAMW,QAAQkC,OAAOC,EAAOvC,cAlBrE,EAAKgB,SAAS,CACZP,SAAS,S,uBA4BnB,SAAUf,EAAOuC,GAAW,IAAD,OACzBX,OAAO,CACLC,IAAK,sCAAwCU,EAAxC,oEAELT,KAAM,MACNE,WAAY,SAAAC,GACVA,EAAIC,iBAAiB,gBAAiB,UAAYlC,IAEpDmC,QAAS,SAAAC,GACFA,GAOL,EAAKd,SAAS,CAACJ,MAAQ,IAEvB,EAAKI,SAAS,CACZnB,OAAQiC,EAAKC,MACba,UAAWX,EACX7B,QAAS,CAAC6B,GACVxB,SAAS,IAGX,EAAKhB,MAAMI,OAAOwC,KAAI,SAACQ,GACjBA,EAAMX,OAAOY,OACf,EAAKC,iBAAiBrD,EAAOmD,EAAM7C,GAAI6C,EAAMX,OAAO,GAAGX,IAAIsB,EAAM9C,MAEjE,EAAKgD,iBAAiBrD,EAAOmD,EAAM7C,GAAIgD,EAAMH,EAAM9C,SAI/B,GAApB,EAAKN,MAAMe,MACb,EAAKQ,SAAS,CAACT,gBAAkB,EAAKd,MAAMI,OAAO,GAAGC,QAAQ,GAAGC,OAEjE,EAAKiB,SAAS,CAACL,YAAc,EAAKlB,MAAMkB,YAAY2B,OAAO,EAAK7C,MAAMI,OAAO,GAAGC,QAAQ,GAAGC,SA1B3F,EAAKiB,SAAS,CACZP,SAAS,S,oBAgCnB,WAAU,IAAD,OACP,OAEI,qBAAKwC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,WACIlC,KAAKtB,MAAMC,OACT,sBAAKuD,UAAW,WAAhB,UACE,oBAAIA,UAAW,SAAf,uCACA,mBACIC,KAAI,ULvNE,yCKuNF,sBLpNF,mCKoNE,yBLlNC,0CKkND,kBAA6ErE,EAAOsE,KACpF,OADA,yCADR,SAIC,wBAAQF,UAAU,SAAlB,gCAED,qBAAIA,UAAW,OAAf,+EAAyF,uBAAzF,8FACA,oBAAIA,UAAW,OAAf,4DASLlC,KAAKtB,MAAMC,QAAUqB,KAAKtB,MAAMgB,SAE7B,8BACE,gCACE,gCACA,qBAAIwC,UAAW,UAAf,qBAAmClC,KAAKtB,MAAMI,OAAO,GAAGC,QAAQ,GAAGC,QACjE,+BAAKgB,KAAKtB,MAAMe,MAAhB,0BAA8CO,KAAKtB,MAAMc,mBAKzD,qBAAI0C,UAAW,aAAf,eACElC,KAAKtB,MAAMkB,YAAY0B,KAAI,SAACtC,GAAD,OACvBA,EAAO,eAKjB,cAACqD,EAAA,EAAD,CAAWC,OAAK,EAACC,MAAI,EAArB,SACE,cAACC,EAAA,EAAD,CAAKN,UAAW,MAAhB,SAEGlC,KAAKtB,MAAMU,YAAYkC,KAAI,SAACE,GAAD,OACxB,cAACiB,EAAA,EAAD,CAAKC,GAAG,IAAR,SACE,gCAQA,mBAAGC,OAAO,SAASR,KAAM,EAAKzD,MAAMiB,cAAc,EAAKjB,MAAMiB,cAAciD,QAAQpB,EAAOvC,IAAM,GAAhG,SACE,qBAAK4D,QAAQ,MAAMX,UAAW,SACzBY,IAAK,EAAKpE,MAAMiB,cAAc,EAAKjB,MAAMiB,cAAciD,QAAQpB,EAAOvC,IAAM,OACjF,qBAAIiD,UAAW,OAAf,gBAA0B,yBAAQA,UAAW,UAA2Ba,QAAS,kBAAM,EAAKC,aAAaxB,EAAOvC,KAAKgE,MAAOzB,EAAOvC,GAAzG,UAA8GuC,EAAOxC,KAArH,MAAmCwC,EAAOvC,OAGpE,4BACE,+BACE,kCAAK,EAAKP,MAAMiB,cAAc,EAAKjB,MAAMiB,cAAciD,QAAQpB,EAAOvC,IAAM,GAA5E,WAIJ,uCAagB,GAAjCe,KAAKtB,MAAMU,YAAY2C,SAAgB/B,KAAKtB,MAAMI,OAAOiD,OAAS,GAC/D,2F,GAlREmB,IAAMC,WCDTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.89738029.chunk.js","sourcesContent":["export const authEndpoint = \"https://accounts.spotify.com/authorize\";\n\n// Replace with your app's client ID, redirect URI and desired scopes\nexport const clientId = \"74074a35e175406aa61bf5f33b3d0c14\";\n// export const redirectUri = \"http://localhost:3000\";\nexport const redirectUri = \"https://jcorf.github.io/spotify-network\";\nexport const scopes = [\n  \"user-top-read\",\n  \"user-read-recently-played\"\n];","// Get the hash of the url\nconst hash = window.location.hash\n.substring(1)\n.split(\"&\")\n.reduce(function(initial, item) {\n  if (item) {\n    var parts = item.split(\"=\");\n    initial[parts[0]] = decodeURIComponent(parts[1]);\n  }\n  return initial;\n}, {});\nwindow.location.hash = \"\";\n\nexport default hash;","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default __webpack_public_path__ + \"static/media/background.99ea6a21.jpg\";","export default __webpack_public_path__ + \"static/media/background.a5965ca3.png\";","import React, {Component} from \"react\";\nimport * as $ from \"jquery\";\nimport {authEndpoint, clientId, redirectUri, scopes} from \"../config\";\nimport hash from \"../hash\";\nimport \"../css/App.css\";\nimport logo from '../logo.svg';\nimport Row from \"react-bootstrap/Row\";\nimport Container from \"react-bootstrap/Container\";\nimport Col from \"react-bootstrap/Col\";\nimport bkj from \"../background.jpg\";\nimport bkp from \"../background.png\";\nimport AlbumList from \"./AlbumList\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      token: null,\n      artist_ID: \"\",\n      artist_Name: \"\",\n      albums: [{artists: [{name: \"\"}]}, {name: \"\"}, {id: \"\"}, {name: \"\"}],\n      tracks: [{artists: [{name: \"\"},  {id: \"\"}]}, {name: \"\"}],\n      all_songs: [],\n      all_artists: [],\n      all_ids: [],\n      recent_artist_id: \"\", \n      temp: \"\",\n      starting_artist: \"\",\n      count: 0,\n      no_data: false,\n      shared_images : [],\n      connections: [],\n      mount : 0,\n    }\n\n\n    //this.getAlbums = this.getAlbums.bind(this);\n    // this.tick = this.tick.bind(this);\n  }\n\n  componentDidMount() {\n    // Set token\n    let _token = hash.access_token;\n\n    if (_token) {\n      // Set token\n      this.setState({\n        token: _token, mount : 0});\n    }\n    }\n    //this.getAlbums(this.state.token, this.state.recent_artist_id);\n\n\n    // this.getUserRecentlyPlayed(this.state.token)\n    // // // \"5Rl15oVamLq7FbSb0NNBNy\")\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.state.mount == 0) {\n      this.getUserRecentlyPlayed(this.state.token)\n      this.getAlbums(this.state.token, this.state.recent_artist_id)\n    }\n    //this.getUserRecentlyPlayed(this.state.token)\n    //this.getAlbums(this.state.token, this.state.recent_artist_id);\n  }\n\n  // componentDidUpdate() {\n  //   if (this.state.mount < 1) {\n  //     this.getUserRecentlyPlayed(this.state.token)\n  //     this.getAlbums(this.state.token, this.state.recent_artist_id);\n  //     this.setState(this.setState({mount: 1}));\n  //     // }\n  //   }\n  // }\n\n  // componentWillUnmount() {\n  //   // clear the interval to save resources\n  //   clearInterval(this.interval);\n  // }\n  //\n  // tick() {\n  //   if (this.state.token) {\n  //     this.getAlbums(this.state.token);\n  //   }\n  // }\n\n\n  //Display the recently played track, get the track's artist and the artist ID, add another variable for artist ID and use that in function call of getAlbums in componentDidMount\n  getUserRecentlyPlayed(token) {\n    $.ajax({\n      url: \"https://api.spotify.com/v1/me/player/recently-played\" + \"?limit=1\",\n      type: \"GET\",\n      dataType: \"json\",\n      beforeSend: xhr => {\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n      },\n      success: data => {\n        if (!data) {\n          this.setState({\n            no_data: true,\n          });\n          return;\n        }\n        this.setState({ recent_artist_id: data.items[0].track.artists[0].id, no_data: false });\n      }\n    })\n  }\n\n\n  changeArtist(artistId) {\n    this.setState({\n      albums: [{artists: [{name: \"\"}, {id: \"\"}]}, {name: \"\"}, {id: \"\"}, {images : [{url : \"\"}]}],\n      tracks: [{artists: [{name: \"\"}, {id: \"\"}]},\n        {name: \"\"}],\n\n      all_songs: [],\n      all_artists: [],\n      all_ids: [],\n      count: this.state.count + 1,\n      shared_images: [],\n    })\n    this.getAlbums(this.state.token, artistId)\n  }\n\n  getTracksOfAlbum(token, albumId, sharedUrl) {\n    $.ajax({\n      url: \"https://api.spotify.com/v1/albums/\" + albumId + \"/tracks\",\n      type: \"GET\",\n      beforeSend: xhr => {\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n      },\n      success: data => {\n\n        if (!data) {\n          this.setState({\n            no_data: true,\n          });\n          return;\n        }\n        this.setState({tracks: data.items, no_data: false});\n        this.state.tracks.map((track) =>\n            this.setState({all_songs: this.state.all_songs.concat(track)})\n        )\n\n        this.state.tracks.map((track) => {\n              track.artists.map((artist) => {\n                    if (!this.state.all_ids.includes(artist.id)) {\n                      const value = [artist.id, sharedUrl, track.name, track.external_urls.spotify]\n                      this.setState({shared_images : this.state.shared_images.concat(value)})\n\n                      this.setState(\n                          {all_artists: this.state.all_artists.concat(artist)})\n                      this.setState({all_ids: this.state.all_ids.concat(artist.id)});\n                    }\n                  }\n              )\n            }\n        )\n      }\n    })\n  }\n\n\n  getAlbums(token, artistId) {\n    $.ajax({\n      url: \"https://api.spotify.com/v1/artists/\" + artistId + \"/albums/?\"\n           + \"offset=0&limit=50&include_groups=album,single,&market=US\",\n      type: \"GET\",\n      beforeSend: xhr => {\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n      },\n      success: data => {\n        if (!data) {\n          this.setState({\n            no_data: true,\n          });\n          return;\n        }\n\n        this.setState({mount : 1})\n\n        this.setState({\n          albums: data.items,\n          artist_Id: artistId,\n          all_ids: [artistId],\n          no_data: false\n        })\n\n        this.state.albums.map((album) => {\n          if (album.images.length ) {\n            this.getTracksOfAlbum(token, album.id, album.images[0].url,album.name)\n          } else {\n            this.getTracksOfAlbum(token, album.id, logo, album.name)\n          }\n        })\n\n        if (this.state.count == 0) {\n          this.setState({starting_artist : this.state.albums[0].artists[0].name})\n        } else {\n          this.setState({connections : this.state.connections.concat(this.state.albums[0].artists[0].name)})\n        }\n\n      }\n    });\n  }\n\n  render() {\n    return (\n\n        <div className=\"App\">\n          <header className=\"App-header\">\n            {!this.state.token && (\n                <div className={\"homepage\"}>\n                  <h1 className={\"header\"}>Spotify Discovery Network</h1>\n                  <a\n                      href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\n                          \"%20\"\n                      )}&response_type=token&show_dialog=true`}\n                  ><button className=\"button\">Login to Spotify</button>\n                  </a>\n                  <h6 className={\"made\"}> See the network of artists from a recently played Artist by you! <br></br> Look for new music or Challenge yourself to find another artist in minimal connections.</h6>\n                  <h6 className={\"made\"}> Made at HackBeanpot 2021 using Spotify API</h6>\n\n\n\n\n\n                </div>\n            )}\n\n            {this.state.token && !this.state.no_data && (\n\n                <div>\n                  <div>\n                    <div>\n                    <h1 className={\"heading\"}>Artist: {this.state.albums[0].artists[0].name}</h1>\n                      <h3>{this.state.count} connections away from {this.state.starting_artist}</h3>\n\n\n\n\n                      <h4 className={\"connection\"}>  {\n                        this.state.connections.map((name) =>\n                            name + \" > \"\n                        )\n                      }\n                      </h4>\n                    </div>\n                  <Container fluid true>\n                    <Row className={\"row\"}>\n\n                      {this.state.all_artists.map((artist) => (\n                          <Col xs=\"3\">\n                            <div>\n                              {/*<div className=\"container\">*/}\n                              {/*  <img src=\"img_avatar.png\" alt=\"Avatar\"*/}\n                              {/*       className=\"image\">*/}\n                              {/*    <div className=\"overlay\">*/}\n                              {/*      <div className=\"text\">Hello World</div>*/}\n                              {/*    </div>*/}\n                              {/*  </div>*/}\n                            <a target=\"_blank\" href={this.state.shared_images[this.state.shared_images.indexOf(artist.id) + 3]}>\n                              <img variant=\"top\" className={\"circle\"}\n                                   src={this.state.shared_images[this.state.shared_images.indexOf(artist.id) + 1]} /></a>\n                              <h3 className={\"text\"}>   <button className={\"button1\"} key={artist.id} onClick={() => this.changeArtist(artist.id)} hover={artist.id}>{artist.name} </button>\n                              </h3>\n\n                              <p>\n                                <left>\n                                  <i> {this.state.shared_images[this.state.shared_images.indexOf(artist.id) + 2]} </i>\n                                </left>\n                              </p>\n\n                              <p>\n                              </p>\n\n                            </div>\n                          </Col>\n                      ))}\n                    </Row>\n                  </Container>\n                  </div>\n                </div>\n            )}\n\n\n            {this.state.all_artists.length == 0 && !this.state.albums.length > 0 && (\n                <h3> This artist hasn't collaborated with anyone :( </h3>\n            )}\n\n          </header>\n        </div>\n    );\n  }\n}\n\n\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}